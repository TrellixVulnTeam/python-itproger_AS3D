///////////////////////////////////////////////////////////////////////
UNITTEST UNITTEST UNITTEST UNITTEST UNITTEST UNITTEST UNITTEST UNITTEST
///////////////////////////////////////////////////////////////////////

Изначально пишешь тест. потом на основе тестов сам файл
* "test_" должна иметь функция тесттирования в начале
* у меня выходила ошибка так как я создао файл/класс math.py
    так как такой уже возможно имеется в питоне выходила некая ошибка.
    наверное путалась с оригиналом, из за жтого переименовал на mathh меньше проблем
    и всё заработало
* что бы запустить с терминала тестовый файл  = python -m unittest test_mathh.py,
    test_mathh от прямого компайла не запускается через терминал
    для этого можем доьавить функцию
    ++++if __name__ == '__main__':
    ++++    unittest.main()
    теперь можно запускать как = python test_mathh.py
* .gitignore можрно создать с коммандлайна самого гит через touch .gitignore

/////////////////////////////////////////////////////////////////////////////
PYTEST PYTEST PYTEST PYTEST PYTEST PYTEST PYTEST PYTEST PYTEST PYTEST PYTEST
/////////////////////////////////////////////////////////////////////////////

pytest pytest_mathh.py
pytest pytest_mathh.py -v   for full inf about test
py.test запускаете полность все тесты которые есть в программе
py.test -v детализация
pytest -v -k "add" выполняется тест таких функций где в имени есть -add-
* общее имя, для того что бы обращаться при выполнении теста
    @pytest.mark.add
        pytest - v -m add
    такие марки нужно сохранить в отдельном файле формата ini
*pytest модет передать параметры к фунция
        @pytest.mark.parametrize('num1, num2, res', [
        (5,5,10)
        ])